@page "/accesorios"
@using AccesoriosApp.DTOs
@using AccesoriosApp.Services
@rendermode InteractiveServer
@inject AccesorioService accesorioService;
@inject IJSRuntime JSRuntime;
@inject NavigationManager navigationManager;

<h3>Accesorios</h3>

<div class="mt-3 mb-3">
    <input type="text" placeholder="Buscar por nombre" @bind="nombreBuscar" class="form-control" />
    <button @onclick="() => BuscarAccesorios()">Buscar</button>
</div>

<a href="/accesorios/guardar" class="btn btn-primary">Agregar Accesorio</a>

@if (accesorios == null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nombre</th>
                <th>Tipo de accesorio</th>
                <th>Descripción</th>
                <th>Foto</th>
                <th>Acciones</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var accesorio in accesorios)
            {
                <tr>
                    <td>@accesorio.Nombre</td>
                    <td>@accesorio.TipoDeAccesorio.Nombre</td>
                    <td>@accesorio.Descripcion</td>
                    <td>
                        <div>
                            <img style="width:100px;object-fit:cover;height:100px;overflow:hidden;border-radius:20px;" src="@accesorio.UrlFoto" />
                        </div>
                    </td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => MoveToUpdate(accesorio.Id)">Editar</button>
                    </td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => ConfirmarEliminarAccesorio(accesorio.Id)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    //PAGINACION
    <div>
        @if (!pageable.First)
        {
                    <button class="btn btn-primary" @onclick="() =>OnChangePage(pageable.Pageable.PageNumber - 1)">Anterior</button>
        }

        <span>Página @(pageable.Pageable.PageNumber + 1) de @pageable.TotalPages</span>

        @if (!pageable.Last)
        {
            <button class="btn btn-primary" @onclick="() =>OnChangePage(pageable.Pageable.PageNumber + 1)">Siguiente</button>
        }
    </div>
}

@code {
    private List<Accesorio> accesorios;
    private ContentResponse pageable;
    private string errorMessage;
    private string nombreBuscar = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var res_accesorios = await accesorioService.GetAccesorios();
            accesorios = res_accesorios.Content;
            pageable = res_accesorios;
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task ConfirmarEliminarAccesorio(int id)
    {
        // Llamar a SweetAlert2 para confirmar
        var confirmado = await JSRuntime.InvokeAsync<bool>("confirmarEliminacion");
        if (confirmado)
        {
            await EliminarAccesorio(id);
        }
    }

    private async Task EliminarAccesorio(int id)
    {
        var eliminado = await accesorioService.DeleteAccesorio(id);
        if (eliminado)
        {
            // Eliminar de la lista de accesorios para actualizar la vista
            accesorios = accesorios.Where(a => a.Id != id).ToList();
            StateHasChanged();
            await JSRuntime.InvokeVoidAsync("mostrarToast","success", "Accesorio eliminado exitosamente.");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("mostrarToast", "error", "Ocurrio un error al eliminar el accesorio");
        }
    }

    private void MoveToUpdate(int id)
    {
        navigationManager.NavigateTo($"/accesorios/editar/{id}");
    }

    //Cambiar de pagina

    private async void OnChangePage(int page)
    {
        try
        {
            var res_accesorios = await accesorioService.GetAccesorios(page, 5, nombreBuscar);
            accesorios = res_accesorios.Content;
            pageable = res_accesorios;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            StateHasChanged();
        }
    }

    private async void BuscarAccesorios()
    {
        try
        {
            var res_accesorios = await accesorioService.GetAccesorios(0, 5, nombreBuscar);
            accesorios = res_accesorios.Content;
            pageable = res_accesorios;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            StateHasChanged();
        }
    }
}
