@page "/tipodeaccesorios"
@using AccesoriosApp.DTOs
@using AccesoriosApp.Services
@rendermode InteractiveServer

@inject TipoDeAccesorioService tipoDeAccesorioService;
@inject IJSRuntime JSRuntime;
@inject NavigationManager navigationManager;

<h3>Tipo de Accesorios</h3>
<link href="css/style.css" rel="stylesheet" />

<div class="mt-3 mb-3 d-flex gap-2">
    <input type="text" placeholder="Buscar por nombre" @bind="buscarNombre" class="form-control" />
    <button class="btn-agregar btn-primary px-4 fw-normal" @onclick="() => BuscarTipoDeAccesorios()">Buscar</button>
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-warning">@errorMessage</div>
}


<a href="/tipodeaccesorio/guardar" class="btn-agregar btn btn-primary btn-icon"><i class="fa-solid fa-plus"></i></a>

@if (tipodeaccesorios == null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <div class="custom-card mt-3">
    <table class="table custom-table">
        <thead>
            <tr>
                <th class="custom-th rounded-m-l">Nombre</th>
                <th class="custom-th rounded-m-r">Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tipodeaccesorio in tipodeaccesorios)
            {
                <tr>
                    <td>@tipodeaccesorio.Nombre</td>                  
                        <td class="gap-2 custom-td">
                        <button class="btn-editar btn-icon" @onclick="() => MoveToUpdate (tipodeaccesorio.Id)"><i class="fa-regular fa-pen-to-square"></i></button>                  
                        <button class="btn-eliminar btn-icon" @onclick="() => ConfirmarEliminar(tipodeaccesorio.Id)"><i class="fa-solid fa-trash"></i></button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
    //PAGINACION
    <div class="mt-3 mb-3 d-flex justify-content-between">
        <button class="btn-agregar btn-icon" @onclick="@(pageable.First ? null : () => OnChangePage(pageable.Pageable.PageNumber - 1))">
            <i class="fa-solid fa-chevron-left"></i>
        </button>
        <span>Página @(pageable.Pageable.PageNumber + 1) de @pageable.TotalPages</span>
        <button class="btn-agregar btn-icon" @onclick="@(pageable.Last ? null : () => OnChangePage(pageable.Pageable.PageNumber + 1))">
            <i class="fa-solid fa-chevron-right"></i>
        </button>
    </div>
}

@code {
    private List<TipoDeAccesorio> tipodeaccesorios;
    private ContentResponseTipoAccesorio pageable;
    private string errorMessage;
    private string buscarNombre = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var res_tipoDeAccesorios = await tipoDeAccesorioService.GetTiposDeAccesorio();
            tipodeaccesorios = res_tipoDeAccesorios.Content;
            pageable = res_tipoDeAccesorios;
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

     private async Task ConfirmarEliminar(int id)
     {
        var confirmado = await JSRuntime.InvokeAsync<bool>("confirmarEliminacion");
        if (confirmado)
        {
            await EliminarTipoDeAccesorio(id);
        }
    }

    //Eliminar tipo de accesorio
    private async Task EliminarTipoDeAccesorio(int id)
    {
        var eliminado = await tipoDeAccesorioService.DeleteTipoDeAccesorio(id);
        if (eliminado)
        {
            tipodeaccesorios = tipodeaccesorios.Where(a => a.Id != id).ToList();
            StateHasChanged();
            await JSRuntime.InvokeVoidAsync("mostrarToast", "success", "Tipo de accesorio eliminado exitosamente.");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("mostrarToast", "error", "Ocurrio un error al eliminar el tipo de accesorio");
        }
    }

    //Editar tipo de accesorio
    private void MoveToUpdate(int id)
    {
        navigationManager.NavigateTo($"/tipodeaccesorios/editar/{id}");
    }

    private async Task ConfirmarEditar(int id)
    {
        var confirmado = await JSRuntime.InvokeAsync<bool>("confirmarEditar");
        if (confirmado)
        {
            await EliminarTipoDeAccesorio(id);
        }
    }

    //Cambiar de pagina
    private async void OnChangePage(int page)
    {
        try
        {
            var res_tipodeaccesorios = await tipoDeAccesorioService.GetTiposDeAccesorio(page, 5, buscarNombre);
            tipodeaccesorios = res_tipodeaccesorios.Content;
            pageable = res_tipodeaccesorios;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            StateHasChanged();
        }
    }

    //buscar
    private async void BuscarTipoDeAccesorios()
    {
        try
        {
            // Llama al servicio para obtener los accesorios filtrados por tipo
            var res_tipodeaccesorios = await tipoDeAccesorioService.GetTiposDeAccesorio(0, 5, buscarNombre);
            tipodeaccesorios = res_tipodeaccesorios.Content;
            pageable = res_tipodeaccesorios;

            // Verifica si no se encontraron resultados
            if (tipodeaccesorios == null || !tipodeaccesorios.Any())
            {
                tipodeaccesorios = new List<TipoDeAccesorio>();
                errorMessage = "No se encontraron accesorios con el tipo especificado.";
            }
            else
            {
                errorMessage = string.Empty; // Limpiar el mensaje de error si hay resultados
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("mostrarToast", "error", "No se encontraron accesorios con el tipo especificado.");
            tipodeaccesorios = new List<TipoDeAccesorio>();
            StateHasChanged();
        }
    }
}
